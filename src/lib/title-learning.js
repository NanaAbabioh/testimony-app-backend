import { adminDb } from './firebase-admin.ts';

/**
 * Fetch good title examples from existing database to improve AI title generation
 * This will particularly help learn from your manually provided Twi language titles
 */
export async function fetchGoodTitleExamples() {
  try {
    if (!adminDb) {
      console.warn('Firebase not available, cannot fetch title examples');
      return [];
    }

    console.log('üîç Fetching good title examples from database...');
    
    // Get clips with good titles (longer than 15 characters, not starting with common patterns)
    const clipsSnapshot = await adminDb.collection('clips')
      .where('title', '>', '') // Has a title
      .limit(100) // Don't need too many examples
      .get();
    
    if (clipsSnapshot.empty) {
      console.log('No clips found in database yet');
      return [];
    }

    const goodTitles = [];
    const twiTitles = [];
    const multiConceptTitles = [];
    
    clipsSnapshot.docs.forEach(doc => {
      const data = doc.data();
      const title = data.title;
      
      if (title && title.length > 15) {
        // Check if this looks like a good, manually crafted title
        const isGoodTitle = !isLikelyAutoGenerated(title);
        
        if (isGoodTitle) {
          const titleData = {
            title: title,
            category: data.category,
            language: data.language || 'English',
            isMultiConcept: title.includes(' | ')
          };
          
          goodTitles.push(titleData);
          
          // Separate Twi titles for special attention
          if (data.language === 'Twi') {
            twiTitles.push({
              title: title,
              category: data.category,
              isMultiConcept: title.includes(' | ')
            });
          }
          
          // Collect multi-concept examples
          if (title.includes(' | ')) {
            multiConceptTitles.push({
              title: title,
              concepts: title.split(' | ').map(c => c.trim()),
              category: data.category
            });
          }
        }
      }
    });

    console.log(`üìö Found ${goodTitles.length} good title examples`);
    console.log(`üåç Found ${twiTitles.length} Twi language titles`);
    console.log(`üîó Found ${multiConceptTitles.length} multi-concept titles`);
    
    // Log some examples for debugging
    if (twiTitles.length > 0) {
      console.log('üéØ Twi title examples:');
      twiTitles.slice(0, 5).forEach((example, index) => {
        console.log(`   ${index + 1}. "${example.title}" (${example.category})`);
      });
    }
    
    if (multiConceptTitles.length > 0) {
      console.log('üîó Multi-concept title examples:');
      multiConceptTitles.slice(0, 3).forEach((example, index) => {
        console.log(`   ${index + 1}. "${example.title}"`);
        console.log(`      Concepts: ${example.concepts.join(', ')}`);
      });
    }

    return {
      goodTitles: goodTitles.map(t => t.title),
      twiTitles: twiTitles,
      multiConceptTitles: multiConceptTitles,
      totalExamples: goodTitles.length
    };

  } catch (error) {
    console.error('‚ùå Error fetching title examples:', error.message);
    return { goodTitles: [], twiTitles: [], totalExamples: 0 };
  }
}

/**
 * Detect if a title looks like it was auto-generated (poorly)
 */
function isLikelyAutoGenerated(title) {
  const autoGenIndicators = [
    title.toLowerCase().startsWith('i was'),
    title.toLowerCase().startsWith('i had'), 
    title.toLowerCase().startsWith('i want to thank'),
    title.includes('Pastor') && title.length < 30,
    title.endsWith('...'),
    title.endsWith(' and'),
    title.endsWith(' but'),
    /^[A-Z][a-z]+ [a-z]+ [a-z]+$/.test(title) && title.length < 25
  ];
  
  return autoGenIndicators.some(indicator => indicator);
}

/**
 * Create enhanced prompt with learned examples
 */
export function createEnhancedTitlePrompt(testimony, goodExamples = []) {
  const exampleSection = goodExamples.length > 0 ? `
LEARN FROM THESE EXCELLENT TITLE EXAMPLES:
${goodExamples.slice(0, 8).map(title => `"${title}"`).join('\n')}

Notice how these titles:
- Focus on the specific outcome/result
- Use powerful, emotional language  
- Are specific to the individual's experience
- Capture the transformation, not just the problem
` : '';

  return `You are creating compelling titles for church testimony videos. 

TASK: Create an intelligent, meaningful title for this testimony.

REQUIREMENTS:
- Maximum 50 characters
- Focus on the OUTCOME/TRANSFORMATION, not the problem
- Be specific to this person's story
- Use powerful, positive language
- Make people want to watch/listen

AVOID these patterns:
- Starting with "I was..." or "I had..."
- Using the first line of the testimony
- Generic phrases like "God helped me"
- Ending with "..." or incomplete thoughts

PREFERRED PATTERNS:
- "From [Problem] to [Victory]" (e.g., "From Homeless to Business Owner")
- "[Specific Result] After [Time]" (e.g., "Pregnant After 12 Years")
- "[Medical Condition] Completely Healed" (e.g., "Diabetes Reversed")
- "[Number] Years of [Problem] Ended" (e.g., "30 Years of Pain Gone")
${exampleSection}

TESTIMONY DETAILS:
Category: ${testimony.category}
Content: ${testimony.full_text || testimony.fullText || ''}

Create ONE compelling title (max 50 characters):`;
}

/**
 * Enhanced title generation with learning capabilities and multi-concept detection
 */
export async function generateTitleWithDatabaseLearning(testimony) {
  try {
    // First check if this might be a multi-concept testimony
    const content = testimony.full_text || testimony.fullText || '';
    const mightBeMultiConcept = detectPotentialMultiConcepts(content);
    
    if (mightBeMultiConcept) {
      console.log('üîç Potential multi-concept testimony detected, using specialized processor...');
      const { generateMultiConceptTitle } = await import('./multi-concept-detector.js');
      return await generateMultiConceptTitle(testimony);
    }
    
    // Fetch good examples from database for single-concept testimonies
    const { goodTitles } = await fetchGoodTitleExamples();
    
    if (goodTitles.length > 0) {
      console.log(`üìö Using ${goodTitles.length} examples to improve title generation`);
      
      // Use the enhanced title generator with examples
      const { generateTitleWithLearning } = await import('./title-generator.js');
      return await generateTitleWithLearning(testimony, goodTitles);
    } else {
      // Fall back to basic intelligent generation
      const { generateIntelligentTitle } = await import('./title-generator.js');
      return await generateIntelligentTitle(testimony);
    }
    
  } catch (error) {
    console.error('‚ùå Error in database learning title generation:', error.message);
    
    // Final fallback
    return testimony.title || `${testimony.category} Testimony`;
  }
}

/**
 * Quick detection of potential multi-concept testimonies based on content patterns
 */
function detectPotentialMultiConcepts(content) {
  if (!content || content.length < 150) return false;
  
  const multiConceptIndicators = [
    // Multiple "and then" patterns
    (content.match(/and then|after that|also|additionally/gi) || []).length >= 2,
    
    // Multiple category keywords
    hasMultipleCategoryKeywords(content),
    
    // Multiple time references suggesting different events
    (content.match(/then|later|after|next|also|meanwhile/gi) || []).length >= 2,
    
    // Multiple "God" actions
    (content.match(/God (also|then|later|again)/gi) || []).length >= 1
  ];
  
  const indicatorCount = multiConceptIndicators.filter(Boolean).length;
  return indicatorCount >= 2; // Need at least 2 indicators
}

/**
 * Check if content contains keywords from multiple categories
 */
function hasMultipleCategoryKeywords(content) {
  const categoryKeywords = {
    health: ['heal', 'cancer', 'disease', 'sick', 'hospital', 'doctor', 'medicine'],
    financial: ['money', 'debt', 'job', 'salary', 'business', 'contract', 'financial'],
    family: ['marriage', 'husband', 'wife', 'child', 'baby', 'pregnant', 'family'],
    education: ['school', 'university', 'exam', 'student', 'graduate', 'admission'],
    legal: ['visa', 'passport', 'immigration', 'court', 'legal', 'permit'],
    career: ['job', 'work', 'promotion', 'career', 'employment', 'company']
  };
  
  const contentLower = content.toLowerCase();
  let matchedCategories = 0;
  
  for (const [category, keywords] of Object.entries(categoryKeywords)) {
    const hasMatch = keywords.some(keyword => contentLower.includes(keyword));
    if (hasMatch) matchedCategories++;
  }
  
  return matchedCategories >= 2;
}